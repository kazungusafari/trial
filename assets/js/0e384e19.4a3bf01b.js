"use strict";(self.webpackChunkformfield_documentation=self.webpackChunkformfield_documentation||[]).push([[671],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return c}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=m(t),c=a,f=p["".concat(s,".").concat(c)]||p[c]||d[c]||o;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var m=2;m<o;m++)l[m]=t[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9881:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return d}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),l=["components"],i={sidebar_position:1},s="Getting Started?",m={unversionedId:"intro",id:"intro",title:"Getting Started?",description:"How to install",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Create a Page",permalink:"/docs/tutorial-basics/create-a-page"}},u={},d=[{value:"How to install",id:"how-to-install",level:2},{value:"Example",id:"example",level:2},{value:"Form Component",id:"form-component",level:2},{value:"FormField Component and its Goodies",id:"formfield-component-and-its-goodies",level:2},{value:"Passing callback function as child of FormField",id:"passing-callback-function-as-child-of-formfield",level:3},{value:"What does this callback take ?",id:"what-does-this-callback-take-",level:3},{value:"What does this callback return ?",id:"what-does-this-callback-return-",level:3},{value:"GetFormFieldProps",id:"getformfieldprops",level:2},{value:"Apply Validation",id:"apply-validation",level:2},{value:"Handle Errors",id:"handle-errors",level:2}],p={toc:d};function c(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started"},"Getting Started?"),(0,o.kt)("h2",{id:"how-to-install"},"How to install"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"  npm i @react/formfield\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"The following code excerpt demonstrates a basic usage example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Form, FormField  } from "@formfield/react";\n\nexport default function Example() {\n\n  const onSubmit = (data) => {\n    console.log(data)\n  };\n\n  return (\n      <Form\n       onSubmit={onSubmit}\n       initialValues={{\n         username: "",\n         email: "",\n         }}\n         >\n        <FormField\n          name="email"\n         >\n          {({ getFormFieldProps}) => (\n            <label>\n              Email:\n              <input\n                {...getFormFieldProps()}\n                type="email"\n              />\n            </label>\n          )}\n        </FormField>\n        <FormField\n          name="username"\n        >\n          {({ getFormFieldProps }) => (\n            <label>\n              Username:\n              <input\n                {...getFormFieldProps()}\n                type="text"\n              />\n        </FormField>\n        <button type="submit">\n          Sign Up\n        </button>\n      </Form>\n    )}\n\n\n\n')),(0,o.kt)("h2",{id:"form-component"},"Form Component"),(0,o.kt)("p",null,"When managing form state,two of things we usually do is;"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Define the ",(0,o.kt)("strong",{parentName:"li"},"initial state"),".The initial values for the form"),(0,o.kt)("li",{parentName:"ul"},"Define ",(0,o.kt)("strong",{parentName:"li"},"submission handler"),".The function to be called when form is submitted")),(0,o.kt)("p",null,"You can define these two things as ",(0,o.kt)("inlineCode",{parentName:"p"},"props of Form component")," as shown below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Form, FormField } from "@formfield/react";\n\nexport default function Example() {\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const initialValues = {\n        username: "",\n        email: "",\n    };\n\n    return (\n        <Form onSubmit={onSubmit} initialValues={initialValues}>\n            /* pass children here */\n        </Form>\n    );\n}\n')),(0,o.kt)("h2",{id:"formfield-component-and-its-goodies"},"FormField Component and its Goodies"),(0,o.kt)("p",null,"The FormField must wrap your form fields.",(0,o.kt)("inlineCode",{parentName:"p"},"It takes the name and validation rules of a form field as props")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"share the following goodies to that form field using a variety of React patterns"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"fieldHasErrors.This is a boolean value which says whether a form field has errors or not as the user is typing"),(0,o.kt)("li",{parentName:"ul"},"fieldErrors.This is a string containing the error for a form field as the user is typing."),(0,o.kt)("li",{parentName:"ul"},"fieldValue.The value of the form field"),(0,o.kt)("li",{parentName:"ul"},"fieldName.The name of the form field"),(0,o.kt)("li",{parentName:"ul"},"fieldHandler.This is an onchange function handler"),(0,o.kt)("li",{parentName:"ul"},"getFormFieldProps .This is function that returns the object shown below")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const obj = { value: fieldValue, onChange: fieldHandler, name: fieldName };\n")),(0,o.kt)("p",null,"Our basic form has two form fields for email and username respectively.We have to wrap each of these form fields using FormField component as shown below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Form, FormField } from "@formfield/react";\n\nexport default function Example() {\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const initialValues = {\n        username: "",\n        email: "",\n    };\n\n    return (\n        <Form onSubmit={onSubmit} initialValues={initialValues}>\n            <FormField name="username">/* pass child here */</FormField>\n            <FormField name="email">/* pass child here */</FormField>\n        </Form>\n    );\n}\n')),(0,o.kt)("p",null,"So how does FormField share its goodies with its child ? There are a variety of ways but today we will talk how FormField uses ",(0,o.kt)("strong",{parentName:"p"},"render props pattern")," to do this."),(0,o.kt)("h3",{id:"passing-callback-function-as-child-of-formfield"},"Passing callback function as child of FormField"),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"using render props pattern,you pass a callback function to the FormField")," inside a curly braces as shown below."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Javascript callbacks are expressions so you have put them in a curly braces when used together with JSX.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Form, FormField } from "@formfield/react";\n\nexport default function Example() {\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const initialValues = {\n        username: "",\n        email: "",\n    };\n\n    return (\n        <Form onSubmit={onSubmit} initialValues={initialValues}>\n            <FormField name="username">{() => {}}</FormField>\n            <FormField name="email">{() => {}}</FormField>\n        </Form>\n    );\n}\n')),(0,o.kt)("h3",{id:"what-does-this-callback-take-"},"What does this callback take ?"),(0,o.kt)("p",null,"It takes the known goodies from FormField.For example one of the goodies is ",(0,o.kt)("inlineCode",{parentName:"p"},"getFormFieldProps")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Form, FormField } from "@formfield/react";\n\nexport default function Example() {\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const initialValues = {\n        username: "",\n        email: "",\n    };\n\n    return (\n        <Form onSubmit={onSubmit} initialValues={initialValues}>\n            <FormField name="username">{({ getFormFieldProps }) => {}}</FormField>\n            <FormField name="email">{({ getFormFieldProps }) => {}}</FormField>\n        </Form>\n    );\n}\n')),(0,o.kt)("h3",{id:"what-does-this-callback-return-"},"What does this callback return ?"),(0,o.kt)("p",null,"It should return the form element that will be visible to the user."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Form, FormField } from "@formfield/react";\n\nexport default function Example() {\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const initialValues = {\n        username: "",\n        email: "",\n    };\n\n    return (\n         <Form\n          onSubmit={onSubmit}\n          initialValues={initialValues}\n         >\n        <FormField\n          name="email"\n         >\n          {({ getFormFieldProps}) => (\n            <label>\n              Email:\n              <input\n                type="email"\n              />\n            </label>\n          )}\n        </FormField>\n        <FormField\n          name="username"\n        >\n          {({ getFormFieldProps }) => (\n            <label>\n              Username:\n              <input\n                type="text"\n              />\n             </label>\n        </FormField>\n        <button type="submit">\n          Sign Up\n        </button>\n      </Form>\n    );\n}\n')),(0,o.kt)("h2",{id:"getformfieldprops"},"GetFormFieldProps"),(0,o.kt)("p",null,"This a function when called return an object with following properties"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n    name : name of the field\n    value : value of the field\n    onChange : callback function to be called when the field value changes\n\n")),(0,o.kt)("p",null,"You can spread the object as shown below to pass the above fields to form elements."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'\nimport { Form, FormField } from "@formfield/react";\n\nexport default function Example() {\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const initialValues = {\n        username: "",\n        email: "",\n    };\n\n    return (\n         <Form\n          onSubmit={onSubmit}\n          initialValues={initialValues}\n         >\n        <FormField\n          name="email"\n         >\n          {({ getFormFieldProps}) => (\n            <label>\n              Email:\n              <input\n                {...getFormFieldProps()}\n                type="email"\n              />\n            </label>\n          )}\n        </FormField>\n        <FormField\n          name="username"\n        >\n          {({ getFormFieldProps }) => (\n            <label>\n              Username:\n              <input\n               {...getFormFieldProps()}\n                type="text"\n              />\n             </label>\n        </FormField>\n        <button type="submit">\n          Sign Up\n        </button>\n      </Form>\n    );\n}\n\n')),(0,o.kt)("h2",{id:"apply-validation"},"Apply Validation"),(0,o.kt)("p",null,"We want the following validation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"All fields are required"),(0,o.kt)("li",{parentName:"ul"},"Email should be a valid email"),(0,o.kt)("li",{parentName:"ul"},"Minimum length length of username is four characters")),(0,o.kt)("p",null,"The FormField also has a prop called ",(0,o.kt)("inlineCode",{parentName:"p"},"rules")," that we can use to define the validation rules"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'\nimport { Form, FormField } from "@formfield/react";\n\nexport default function Example() {\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const initialValues = {\n        username: "",\n        email: "",\n    };\n\n    return (\n         <Form\n          onSubmit={onSubmit}\n          initialValues={initialValues}\n         >\n        <FormField\n          name="email"\n          rules={[\n            FormRules.required(\'Email is required\'),\n            FormRules.email("Provide a correct email")]}\n         >\n          {({ getFormFieldProps}) => (\n            <label>\n              Email:\n              <input\n                {...getFormFieldProps()}\n                type="email"\n              />\n            </label>\n          )}\n        </FormField>\n        <FormField\n          name="username"\n          rules ={[\n            FormRules.required(\'Username is required\')\n            FormRules.minLength(4,\'Minimum length of username characters is four\')\n            ]}\n        >\n          {({ getFormFieldProps }) => (\n            <label>\n              Username:\n              <input\n               {...getFormFieldProps()}\n                type="text"\n              />\n             </label>\n        </FormField>\n        <button type="submit">\n          Sign Up\n        </button>\n      </Form>\n    );\n}\n\n')),(0,o.kt)("h2",{id:"handle-errors"},"Handle Errors"),(0,o.kt)("p",null,"We want to show form element's error if it has any error"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'\nimport { Form, FormField } from "@formfield/react";\n\nexport default function Example() {\n    const onSubmit = (data) => {\n        console.log(data);\n    };\n\n    const initialValues = {\n        username: "",\n        email: "",\n    };\n\n    return (\n         <Form\n          onSubmit={onSubmit}\n          initialValues={initialValues}\n         >\n        <FormField\n          name="email"\n          rules={[\n            FormRules.required(\'Email is required\'),\n            FormRules.email("Provide a correct email")]}\n         >\n          {({ getFormFieldProps,fieldHasErrors,fieldErrors}) => (\n            <>\n            <label>\n              Email:\n              <input\n                {...getFormFieldProps()}\n                type="email"\n              />\n            </label>\n            {fieldHasErrors && <span>{fieldErrors}</span>}\n            </>\n          )}\n        </FormField>\n        <FormField\n          name="username"\n          rules ={[\n            FormRules.required(\'Username is required\')\n            FormRules.minLength(4,\'Minimum length of username characters is four\')\n            ]}\n        >\n          {({ getFormFieldProps,fieldHasErrors,fieldErrors }) => (\n            <>\n            <label>\n              Username:\n              <input\n               {...getFormFieldProps()}\n                type="text"\n              />\n                 </label>\n           {fieldHasErrors && <span>{fieldErrors}</span>}\n       </>\n        </FormField>\n        <button type="submit">\n          Sign Up\n        </button>\n      </Form>\n    );\n}\n\n')))}c.isMDXComponent=!0}}]);